{
    "fairness": {
        "score_class_balance": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_statistical_parity_difference": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_equal_opportunity_difference": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_average_odds_difference": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_disparate_impact": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_theil_index": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_euclidean_distance": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_mahalanobis_distance": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_manhattan_distance": {
            "parameter_XY": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        }
    },
    "explainability": {
        "score_algorithm_class": {
            "clf_type_score": {
                "value": {
                    "RandomForestClassifier": 3,
                    "KNeighborsClassifier": 3,
                    "SVC": 2,
                    "GaussianProcessClassifier": 3,
                    "DecisionTreeClassifier": 4,
                    "MLPClassifier": 1,
                    "AdaBoostClassifier": 3,
                    "GaussianNB": 3.5,
                    "QuadraticDiscriminantAnalysis": 3,
                    "LogisticRegression": 3,
                    "LinearRegression": 3.5
                },
                "description": "Mapping of Learning techniques to the level of explainability based on on literature research and qualitative analysis of each learning technique. For more information see gh-pages/explainability/taxonomy",
                "label": "Score Mapping"
            }
        },
        "score_model_size": {
            "thresholds": {
                "value": [
                    10,
                    30,
                    100,
                    500
                ],
                "description": "Thresholds of how to map model size to a score from 1-5. Example if 10 is the first number it means that a model with 10 or less features would get the best score(5) and if 500 was the last number it would mean that a model with 500 or more features would get the worst score (1), analog for the numbers in between",
                "label": "Score Thresholds"
            }
        },
        "score_correlated_features": {
            "thresholds": {
                "value": [
                    0.05,
                    0.15,
                    0.25,
                    0.4
                ],
                "description": "Thresholds of how to map the percentage of highly correlated features (>=0.95) to a score from 1-5. Example if 0.05 is the first number it means that training dataset with 5% or less highly correlated variables would get the best score(5) and if 0.4 was the last number it would mean that a training dataset 40% or more highly correlated features would get the worst score (1), analog for the numbers in between",
                "label": "Score Thresholds"
            }
        },
        "score_feature_relevance": {
            "thresholds": {
                "value": [
                    0.05,
                    0.1,
                    0.2,
                    0.3
                ],
                "description": "Map the fraction of many features make up 60% of all importance to a Score from 1-5. If the first number in the list is 0.05 it means that 5% or less features make up more than 60% of all importance, which would be a very skewed distribution of the feature importance and result in the worst score of 1, and if the next number is 0.1 it means if the fraction is between 5%-10% the Score would be a 2, analog the other thresholds",
                "label": "Score Thresholds"
            },
            "threshold_outlier": {
                "value": 0.03,
                "description": "The threshold for a score penalty if there are too many outliers in the feature importance distribution. For example if the threshold is 0.03 it means taht if 3% or more features are outliers a penalty with tha value #penalty_outlier would be substacted from the score",
                "label": "Threshold for outliers"
            },
            "penalty_outlier": {
                "value": 0.5,
                "description": "The penalty that should be applied if the the number of outliers in the feature importance distribution is equal or greater than the #threshold_outlier. For example if this value is 0.5 it would mean if the the theshold is reached 0.5 points will be substacted from score. If the number is set to 0 no penalty will be applied",
                "label": "Penalty for outliers"
            }
        }
    },
    "robustness": {
        "score_loss_sensitivity": {
            "thresholds": {
                "value": [
                    2.5,
                    2,
                    1.5,
                    1,
                    0.5
                ],
                "description": "Thresholds of how to map loss sensitivity from 1-5. Better confidence score means higher robustness.",
                "label": "Score Thresholds"
            }
        },
        "score_clever_score": {
            "thresholds": {
                "value": [
                    0.2,
                    0.5,
                    1,
                    2.5,
                    5
                ],
                "description": "Thresholds of how to map CLEVER score from 1-5. Better confidence score means higher robustness.",
                "label": "Score Thresholds"
            }
        },
        "score_confidence_score": {
            "thresholds": {
                "value": [
                    0,
                    20,
                    40,
                    60,
                    80
                ],
                "description": "Thresholds of how to map confidence score from 1-5. Better confidence score means higher robustness.",
                "label": "Score Thresholds"
            }
        },
        "score_fast_gradient_attack": {
            "thresholds": {
                "value": [
                    100,
                    80,
                    60,
                    40,
                    20,
                    0
                ],
                "description": "Thresholds of how to map difference between before-after attack accuracies from 1-5. Example: If the before attack accuracy is 85% and after attack accuracy is again 85% it means model is so robust that attack was not successful at all. The difference is 0 and hence this would result in a score of 5 (best score). However if the before attack accuracy was 100% and after attack accuracy is 0% then the model is not robust. The difference is 100% and it would result in score 0 (worst score)",
                "label": "Score Thresholds"
            }
        },
        "score_carlini_wagner_attack": {
            "thresholds": {
                "value": [
                    100,
                    80,
                    60,
                    40,
                    20,
                    0
                ],
                "description": "Thresholds of how to map difference between before-after attack accuracies from 1-5. Example: If the before attack accuracy is 85% and after attack accuracy is again 85% it means model is so robust that attack was not successful at all. The difference is 0 and hence this would result in a score of 5 (best score). However if the before attack accuracy was 100% and after attack accuracy is 0% then the model is not robust. The difference is 100% and it would result in score 0 (worst score)",
                "label": "Score Thresholds"
            }
        },
        "score_deepfool_attack": {
            "thresholds": {
                "value": [
                    100,
                    80,
                    60,
                    40,
                    20,
                    0
                ],
                "description": "Thresholds of how to map difference between before-after attack accuracies from 1-5. Example: If the before attack accuracy is 85% and after attack accuracy is again 85% it means model is so robust that attack was not successful at all. The difference is 0 and hence this would result in a score of 5 (best score). However if the before attack accuracy was 100% and after attack accuracy is 0% then the model is not robust. The difference is 100% and it would result in score 0 (worst score)",
                "label": "Score Thresholds"
            }
        }
    },
    "methodology": {
        "score_normalization": {
            "parameter_normalization_technique": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_missing_data": {
            "parameter_missing_data": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_regularization": {
            "parameter_regularization_technique": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_train_test_split": {
            "parameter_split": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_test_accuracy": {
            "parameter_normalization_technique": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_f1": {
            "parameter_split": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        },
        "score_factsheet_completeness": {
            "parameter_split": {
                "value": "The value of the parameter_XY",
                "description": "The description of the paramter and its impact"
            }
        }
    }
}